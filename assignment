/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 */

package com.mycompany.y1s1assignment;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.util.Scanner;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.sql.SQLException;
import java.sql.ResultSet;
import java.sql.Statement;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDate;

public class Y1S1assignment {
    public static void mainMenu(String name, double balance, double savings, double loan) {
        System.out.println("==Welcome, " + name + "==");
        System.out.printf("Balance: %.2f\n", balance);
        System.out.printf("Savings: %.2f\n", savings);
        System.out.printf("Loan: %.2f\n\n", loan);
        System.out.println("== Transaction ==");
        System.out.println("1.Debit");
        System.out.println("2.Credit");
        System.out.println("3.History");
        System.out.println("4.Savings");
        System.out.println("5.Credit Loan");
        System.out.println("6.Deposit Interest Predictor");
        System.out.println("7.Log Out");
    }
    public static double debit(double balance,int percentage,double savings) {
        Scanner scanner = new Scanner(System.in);
        LocalDateTime currentDateTime = LocalDateTime.now();
        double limit = 10000;
        double debit;

        while (true) {
            System.out.println("== Debit ==");
            System.out.print("Enter amount: ");
            debit = scanner.nextDouble();
            if (debit <= 0) {
                System.out.println("The amount must be positive. Please reenter another amount.");
            } else if (debit > limit) {
                System.out.println("The amount exceeds the debit limit. Please reenter another amount.");
            } else {
                break;
            }
        }

        scanner.nextLine();
        System.out.print("Enter description: ");
        String description = scanner.nextLine();
        while (description.length() > 100) {
            System.out.println("The description is too long. Please reenter description.");
            System.out.print("Enter description: ");
            description = scanner.nextLine();
        }
        if(percentage==0){
        balance += debit;
        if (record(currentDateTime, description,debit,0, balance,1)) {//user_id
            System.out.println("\nDate: " + currentDateTime);
            System.out.println("\nDebit Successfully Recorded!!!");
        } else {
            System.out.println("\nFailed to record debit transaction.");
        }
        return balance;
        }else{
            savings+=((debit*percentage)/100);
            balance+=(debit-savings);
        if (record(currentDateTime, description,debit,0, balance,1)) {//user_id
            System.out.println("\nDate: " + currentDateTime);
            System.out.println("\nDebit Successfully Recorded!!!");
        } else {
            System.out.println("\nFailed to record debit transaction.");
        }
        return balance;
        
        }
    }

    public static double credit(double balance) {
        Scanner scanner = new Scanner(System.in);
        LocalDateTime currentDateTime = LocalDateTime.now();
        double limit = 2500;
        double credit;

        while (true) {
            System.out.println("== Credit ==");
            System.out.print("Enter amount: ");
            credit = scanner.nextDouble();
            if (credit <= 0) {
                System.out.println("The amount must be positive. Please reenter another amount.");
            } else if (credit > limit) {
                System.out.println("The amount exceeds the credit limit. Please reenter another amount.");
            } else if (credit > balance) {
                System.out.println("The amount exceeds your balance. Please reenter another amount.");
            } else {
                break;
            }
        }

        scanner.nextLine(); 
        System.out.print("Enter description: ");
        String description = scanner.nextLine();
        while (description.length() > 100) {
            System.out.println("The description is too long. Please reenter description.");
            System.out.print("Enter description: ");
            description = scanner.nextLine();
        }

        balance -= credit;
        if (record(currentDateTime, description, 0, credit, balance,1)) {//user_id
            System.out.println("Date: " + currentDateTime);
            System.out.println("\nCredit Successfully Recorded!!!");
        } else {
            System.out.println("\nFailed to record credit transaction.");
        }
        return balance;
    }
    public static boolean record(LocalDateTime date, String description, double debit, double credit, double balance,int user_id) {
    String insertSQL = "INSERT INTO History (date, description, debit, credit, balance,user_id) VALUES (?, ?, ?, ?, ?,?)";
    try (Connection connection = Database.getConnection();
         PreparedStatement pstmt = connection.prepareStatement(insertSQL)) {

        pstmt.setString(1, date.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));
        pstmt.setString(2, description);
        pstmt.setDouble(3, debit);
        pstmt.setDouble(4, credit);
        pstmt.setDouble(5, balance);
        pstmt.setInt(6, user_id);

        int rowsAffected = pstmt.executeUpdate();
        return rowsAffected > 0;
    } catch (SQLException e) {
        System.err.println("Error recording transaction: " + e.getMessage());
        return false;
    }
}
public static void history(){
    LocalDateTime currentDateTime = LocalDateTime.now();
    int currentYear=currentDateTime.getYear();
    int currentMonth=currentDateTime.getMonthValue();
     String query = "SELECT * FROM History WHERE MONTH(date) = " + currentMonth + " AND YEAR(date) = " + currentYear;
     try (Connection connection = Database.getConnection();
         Statement stmt = connection.createStatement();
         ResultSet rs = stmt.executeQuery(query)) {
        
        System.out.println("\n== Transaction History ==");
        System.out.printf("%-20s %-30s %-10s %-10s %-10s%-20s%-10s%n",
               "Date", "Description", "Debit", "Credit", "Balance","TransactionID","user_id");

        while (rs.next()) {
            String date = rs.getString("date");
            String description = rs.getString("description");
            double debit = rs.getDouble("debit");
            double credit = rs.getDouble("credit");
            double balance = rs.getDouble("balance");
            String TransactionID = rs.getString("TransactionID");
            int user_id=rs.getInt("user_id");
            System.out.printf("%-20s %-30s %-10.2f %-10.2f %-10.2f%-20s%-10s%n",
                    date, description, debit, credit, balance,TransactionID,user_id);
        }
    } catch (Exception e) {
        System.err.println("Error retrieving transaction history: " + e.getMessage());
    }
}
    public static void csv() {
        LocalDateTime currentDateTime = LocalDateTime.now();
        int currentYear=currentDateTime.getYear();
        int currentMonth=currentDateTime.getMonthValue();
        String query = "SELECT * FROM History WHERE MONTH(date) = " + currentMonth + " AND YEAR(date) = " + currentYear;
        String csvFilePath = "TransactionHistory_" + currentMonth + "_" + currentYear + ".csv";
        try (Connection connection = Database.getConnection();
             Statement stmt = connection.createStatement();
             ResultSet rs = stmt.executeQuery(query);
             FileWriter csvWriter = new FileWriter(csvFilePath)) {
            csvWriter.append("Date,Description,Debit,Credit,Balance,TransactionID,user_id\n");
            while (rs.next()) {
                csvWriter.append(rs.getString("date") + ",")
                         .append(rs.getString("description").replace(",", " ") + ",") // Escape commas
                         .append(rs.getDouble("debit") + ",")
                         .append(rs.getDouble("credit") + ",")
                         .append(rs.getDouble("balance") + ",")
                         .append(rs.getInt("TransactionID") + ",")
                         .append(rs.getInt("user_id") + "\n");
            }

            System.out.println("Data exported successfully to " + csvFilePath);

        } catch (IOException e) {
            System.err.println("Error writing to CSV file: " + e.getMessage());
        } catch (Exception e) {
            System.err.println("Error exporting data: " + e.getMessage());
        }
    }
   public static int savings(){
       Scanner scanner=new Scanner(System.in);
       System.out.println("== Savings ==");
       while(true){
           System.out.print("Are you sure you want to activate it? (Y/N) :");
           char status=scanner.next().toUpperCase().charAt(0);
           if(status!='Y'&&status!='N'){
               System.out.println("Please enter only Y or N.");
           }else if(status=='N'){
               return 0;
           }else{
               break;
           }
       }    
       scanner.nextLine();
       System.out.print("Please enter the percentage you wish to deduct from the next debit:");
               int percentage=scanner.nextInt();
               recordSaving(1,percentage);//1=userid
               return percentage;
}
   public static boolean recordSaving(int user_id,int percentage) {//need userid
    String insertSQL = "INSERT INTO savings (user_id,percentage) VALUES (?,?)";
    try (Connection connection = Database.getConnection();
         PreparedStatement pstmt = connection.prepareStatement(insertSQL)) {

        pstmt.setInt(1, user_id);
        pstmt.setInt(2, percentage);

        int rowsAffected = pstmt.executeUpdate();
        return rowsAffected > 0;
    } catch (SQLException e) {
        System.err.println("Error recording transaction: " + e.getMessage());
        return false;
    }
}
    public static void historypage() {
        System.out.println("Would you like to do any extra feature on the history?");
        System.out.println("1.sort by date");
        System.out.println("2.filter by date");
        System.out.println("3.filter by transaction type");
        System.out.println("4.filter by amount range");
        System.out.println("5.sort by amount");
    }
    public static void historyfbd() {
        Scanner scanner = new Scanner(System.in);
        System.out.println("== Filter Transaction History ==");
    System.out.print("Enter start date (yyyy-MM-dd): ");
    String startDate = scanner.nextLine();
    System.out.print("Enter end date (yyyy-MM-dd): ");
    String endDate = scanner.nextLine();

    String query = "SELECT * FROM History WHERE date BETWEEN ? AND ?";
    try (Connection connection = Database.getConnection();
         PreparedStatement pstmt = connection.prepareStatement(query)) {
        
        pstmt.setString(1, startDate);
        pstmt.setString(2, endDate);

        try (ResultSet rs = pstmt.executeQuery()) {
            System.out.println("\n== Transaction History ==");
            System.out.printf("%-20s %-30s %-10s %-10s %-10s %-20s%-10s%n",
                    "Date", "Description", "Debit", "Credit", "Balance", "TransactionID","user_id");

            while (rs.next()) {
                String date = rs.getString("date");
                String description = rs.getString("description");
                double debit = rs.getDouble("debit");
                double credit = rs.getDouble("credit");
                double balance = rs.getDouble("balance");
                String transactionID = rs.getString("TransactionID");
                int user_id=rs.getInt("user_id");

                System.out.printf("%-20s %-30s %-10.2f %-10.2f %-10.2f %-20s%-10s%n",
                        date, description, debit, credit, balance, transactionID,user_id);
            }
        }
    } catch (Exception e) {
        System.err.println("Error retrieving transaction history: " + e.getMessage());
    }
    String csvFilePath = "TransactionHistory_" + startDate + "_to_" + endDate + ".csv";

    try (Connection connection = Database.getConnection();
         PreparedStatement pstmt = connection.prepareStatement(query);
         FileWriter csvWriter = new FileWriter(csvFilePath)) {
        
        pstmt.setString(1, startDate);
        pstmt.setString(2, endDate);

        try (ResultSet rs = pstmt.executeQuery()) {
            csvWriter.append("Date,Description,Debit,Credit,Balance,TransactionID,user_id\n");

            while (rs.next()) {
                csvWriter.append(rs.getString("date") + ",")
                         .append(rs.getString("description").replace(",", " ") + ",") 
                         .append(rs.getDouble("debit") + ",")
                         .append(rs.getDouble("credit") + ",")
                         .append(rs.getDouble("balance") + ",")
                         .append(rs.getString("TransactionID") + ",")
                         .append(rs.getInt("user_id")+"\n");
            }

            System.out.println("Data exported successfully to " + csvFilePath);
        }
    } catch (IOException e) {
        System.err.println("Error writing to CSV file: " + e.getMessage());
    } catch (Exception e) {
        System.err.println("Error exporting data: " + e.getMessage());
    }
    }
    public static void historyfbtt() {
    Scanner scanner = new Scanner(System.in);
    System.out.println("== Filter Transaction History by Type ==");

    System.out.print("Enter transaction type (debit/credit): ");
    String transactionType = scanner.nextLine().toLowerCase();

    if (!transactionType.equals("debit") && !transactionType.equals("credit")) {
        System.out.println("Invalid transaction type. Please enter 'debit' or 'credit'.");
        return;
    }

    String query = "SELECT * FROM History WHERE " + transactionType + " > 0";
    try (Connection connection = Database.getConnection();
         PreparedStatement pstmt = connection.prepareStatement(query);
         ResultSet rs = pstmt.executeQuery()) {

        System.out.println("\n== Transaction History by Type: " + transactionType.toUpperCase() + " ==");
        System.out.printf("%-20s %-30s %-10s %-10s %-10s %-20s%-10s%n",
                "Date", "Description", "Debit", "Credit", "Balance", "TransactionID", "user_id");

        while (rs.next()) {
            String date = rs.getString("date");
            String description = rs.getString("description");
            double debit = rs.getDouble("debit");
            double credit = rs.getDouble("credit");
            double balance = rs.getDouble("balance");
            String transactionID = rs.getString("TransactionID");
            int user_id = rs.getInt("user_id");

            System.out.printf("%-20s %-30s %-10.2f %-10.2f %-10.2f %-20s%-10s%n",
                    date, description, debit, credit, balance, transactionID, user_id);
        }
    } catch (Exception e) {
        System.err.println("Error retrieving transaction history: " + e.getMessage());
    }

    String csvFilePath = "TransactionHistory_" + transactionType + ".csv";

    try (Connection connection = Database.getConnection();
         PreparedStatement pstmt = connection.prepareStatement(query);
         ResultSet rs = pstmt.executeQuery();
         FileWriter csvWriter = new FileWriter(csvFilePath)) {

        csvWriter.append("Date,Description,Debit,Credit,Balance,TransactionID,user_id\n");

        while (rs.next()) {
            csvWriter.append(rs.getString("date") + ",")
                     .append(rs.getString("description").replace(",", " ") + ",") 
                     .append(rs.getDouble("debit") + ",")
                     .append(rs.getDouble("credit") + ",")
                     .append(rs.getDouble("balance") + ",")
                     .append(rs.getString("TransactionID") + ",")
                     .append(rs.getInt("user_id") + "\n");
        }

        System.out.println("Data exported successfully to " + csvFilePath);
    } catch (IOException e) {
        System.err.println("Error writing to CSV file: " + e.getMessage());
    } catch (Exception e) {
        System.err.println("Error exporting data: " + e.getMessage());
    }
}
public static void historyfba() {
    Scanner scanner = new Scanner(System.in);
    System.out.println("== Filter Transaction History by Amount ==");
    
    System.out.print("Enter minimum amount: ");
    double minAmount = scanner.nextDouble();
    
    System.out.print("Enter maximum amount: ");
    double maxAmount = scanner.nextDouble();

    String query = "SELECT * FROM History WHERE (debit BETWEEN ? AND ?) OR (credit BETWEEN ? AND ?)";
    
    try (Connection connection = Database.getConnection();
         PreparedStatement pstmt = connection.prepareStatement(query)) {
        
        pstmt.setDouble(1, minAmount);
        pstmt.setDouble(2, maxAmount);
        pstmt.setDouble(3, minAmount);
        pstmt.setDouble(4, maxAmount);

        try (ResultSet rs = pstmt.executeQuery()) {
            System.out.println("\n== Transaction History ==");
            System.out.printf("%-20s %-30s %-10s %-10s %-10s %-20s %-10s%n",
                    "Date", "Description", "Debit", "Credit", "Balance", "TransactionID", "user_id");

            while (rs.next()) {
                String date = rs.getString("date");
                String description =rs.getString("description");
                double debit = rs.getDouble("debit");
                double credit = rs.getDouble("credit");
                double balance =rs.getDouble("balance");
                String transactionID = rs.getString("TransactionID");
                int user_id= rs.getInt("user_id");

                System.out.printf("%-20s %-30s %-10.2f %-10.2f %-10.2f %-20s %-10d%n",
                        date, description, debit, credit, balance, transactionID, user_id);
            }
        }
    } catch (Exception e) {
        System.err.println("Error retrieving transaction history: " + e.getMessage());
    }

    String csvFilePath = "TransactionHistory_AmountRange_" + minAmount + "_to_" + maxAmount + ".csv";

    try (Connection connection = Database.getConnection();
         PreparedStatement pstmt = connection.prepareStatement(query);
         FileWriter csvWriter = new FileWriter(csvFilePath)) {
        
        pstmt.setDouble(1, minAmount);
        pstmt.setDouble(2, maxAmount);
        pstmt.setDouble(3, minAmount);
        pstmt.setDouble(4, maxAmount);

        try (ResultSet rs = pstmt.executeQuery()) {
            csvWriter.append("Date,Description,Debit,Credit,Balance,TransactionID,user_id\n");

            while (rs.next()) {
                csvWriter.append(rs.getString("date") + ",")
                         .append(rs.getString("description").replace(",", " ") + ",") // Escape commas
                         .append(rs.getDouble("debit") + ",")
                         .append(rs.getDouble("credit") + ",")
                         .append(rs.getDouble("balance") + ",")
                         .append(rs.getString("TransactionID") + ",")
                         .append(rs.getInt("user_id") + "\n");
            }

            System.out.println("Data exported successfully to " + csvFilePath);
        }
    } catch (IOException e) {
        System.err.println("Error writing to CSV file: " + e.getMessage());
    } catch (Exception e) {
        System.err.println("Error exporting data: " + e.getMessage());
    }
}
public static void historysba() {
    
    String query = "SELECT * FROM History ORDER BY debit DESC, credit DESC";

    try (Connection connection = Database.getConnection();
         PreparedStatement pstmt = connection.prepareStatement(query)) {
        
        
        try (ResultSet rs = pstmt.executeQuery()) {
            System.out.println("\n== Transaction History ==");
            System.out.printf("%-20s %-30s %-10s %-10s %-10s %-20s %-10s%n",
                    "Date", "Description", "Debit", "Credit", "Balance", "TransactionID", "user_id");

            while (rs.next()) {
                String date = rs.getString("date");
                String description = rs.getString("description");
                double debit = rs.getDouble("debit");
                double credit = rs.getDouble("credit");
                double balance = rs.getDouble("balance");
                String transactionID = rs.getString("TransactionID");
                int user_id = rs.getInt("user_id");

                System.out.printf("%-20s %-30s %-10.2f %-10.2f %-10.2f %-20s %-10d%n",
                        date, description, debit, credit, balance, transactionID, user_id);
            }
        }
    } catch (Exception e) {
        System.err.println("Error retrieving transaction history: " + e.getMessage());
    }

    String csvFilePath = "TransactionHistory_sortbyamount" +".csv";

    try (Connection connection = Database.getConnection();
         PreparedStatement pstmt = connection.prepareStatement(query);
         FileWriter csvWriter = new FileWriter(csvFilePath)) {
        
        
        try (ResultSet rs = pstmt.executeQuery()) {
            csvWriter.append("Date,Description,Debit,Credit,Balance,TransactionID,user_id\n");

            while (rs.next()) {
                csvWriter.append(rs.getString("date") + ",")
                         .append(rs.getString("description").replace(",", " ") + ",") // Escape commas
                         .append(rs.getDouble("debit") + ",")
                         .append(rs.getDouble("credit") + ",")
                         .append(rs.getDouble("balance") + ",")
                         .append(rs.getString("TransactionID") + ",")
                         .append(rs.getInt("user_id") + "\n");
            }

            System.out.println("Data exported successfully to " + csvFilePath);
        }
    } catch (IOException e) {
        System.err.println("Error writing to CSV file: " + e.getMessage());
    } catch (Exception e) {
        System.err.println("Error exporting data: " + e.getMessage());
    }
}
public static boolean endofmonth(){
    LocalDate currentDate=LocalDate.now();
    LocalDate endofmonth=currentDate.withDayOfMonth(currentDate.lengthOfMonth());
        return currentDate.equals(endofmonth);
}

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        double balance = 0.00;//maybe not 0
        double savings = 0.00;//maybe not 0
        double loan = 0.00;//maybe not 0
        int percentage=0;//maybe not 0
        String name = "User"; 
        int option;
        if(endofmonth()==true){
            balance+=savings;
            savings-=savings;
        }else{
        
        }
        do {
            mainMenu(name, balance, savings, loan);
            option = scanner.nextInt();
            switch (option) {
                case 1:
                    balance = debit(balance,percentage,savings); 
                    savings+=((balance/(100-percentage))*percentage);
                    percentage=0;
                    break;
                case 2:
                    balance = credit(balance); 
                    break;
                case 3:
                    history();
                    historypage();
                    int choice=scanner.nextInt();
                    switch(choice){
                        case 1:
                            csv();
                            break;
                        case 2:
                            historyfbd();
                            break;
                        case 3:
                            historyfbtt();
                            break;
                        case 4:
                            historyfba();
                            break;
                        case 5:
                            historysba();
                            break;
                        
                        default:
                            System.out.println("Invalid option");
                    }
                    break;
                case 4:
                    percentage=savings();
                    break;
                case 7:
                    System.out.println("Logging out...");
                    break;
                default:
                    System.out.println("Invalid option. Please try again.");
            }
        } while (option != 7);
    }

    
}
